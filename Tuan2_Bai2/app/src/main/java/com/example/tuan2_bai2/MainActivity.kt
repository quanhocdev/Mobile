package com.example.tuan2_bai2

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            App()
        }
    }
}

@Composable
fun App() {
    var ten by remember { mutableStateOf("") }
    var tuoi by remember { mutableStateOf("") }
    var ketqua by remember { mutableStateOf("")}
    var numbers by remember { mutableStateOf(listOf<Int>()) }

    var errorMessage by remember { mutableStateOf("") } // üîπ bi·∫øn l∆∞u th√¥ng b√°o l·ªói
    Column(
        modifier = Modifier
            .fillMaxSize(),
        verticalArrangement = Arrangement.Center,             // c√°c ph·∫ßn t·ª´ x·∫øp t·ª´ tr√™n xu·ªëng
        horizontalAlignment = Alignment.CenterHorizontally      // c√°c ph·∫ßn t·ª´ cƒÉn gi·ªØa theo chi·ªÅu ngang
    ) {
        // üîπ Ph·∫ßn c·ªë ƒë·ªãnh gi·ªØa (ti√™u ƒë·ªÅ + nh·∫≠p + n√∫t)
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier
                .padding(bottom = 20.dp)
        ) {
            Text(
                text = "Th·ª±c h√†nh 01",
                style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.Bold),
                modifier = Modifier.padding(bottom = 20.dp)
            )
            Box(
                modifier = Modifier
                    .fillMaxWidth()            // chi·∫øm to√†n chi·ªÅu ngang (ho·∫∑c d√πng width c·ª• th·ªÉ)
                    .height(150.dp)            // chi·ªÅu cao box
                    .background(Color.Gray)    // m√†u n·ªÅn x√°m
                    .padding(10.dp)            // kho·∫£ng c√°ch b√™n trong box
            ){
                Column {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "H·ªç v√† t√™n",
                    style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.Bold),
                    modifier = Modifier.padding(bottom = 20.dp)
                )

                Spacer(modifier = Modifier.width(8.dp))

                TextField(
                    value = ten,    // gi√° tr·ªã c·ªßa √¥
                    onValueChange = {
                        ten = it  // m·ªói l·∫ßn ƒë·ªïi n·ªôi dung th√¨ bi·∫øn input ƒë·ªïi theo
                        errorMessage = ""
                    },  // X√≥a l·ªói khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
                    modifier = Modifier
                        .width(200.dp),
                    singleLine = true                )

            }
                    Spacer(modifier = Modifier.height(10.dp))

                    Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "Tu·ªïi",
                    style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.Bold),
                    modifier = Modifier.padding(bottom = 20.dp)
                )

                Spacer(modifier = Modifier.width(8.dp))

                TextField(
                    value = tuoi,    // gi√° tr·ªã c·ªßa √¥
                    onValueChange = {
                        tuoi = it;  // m·ªói l·∫ßn ƒë·ªïi n·ªôi dung th√¨ bi·∫øn input ƒë·ªïi theo
                        errorMessage = ""
                    },  // X√≥a l·ªói khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
                    modifier = Modifier
                        .width(200.dp),
                    singleLine = true  // kh√¥ng cho ph√©p xu·ªëng d√≤ng, ho·∫∑c false ƒë·ªÉ xu·ªëng d√≤ng

                )

            }
                }
                }
            Button(
                onClick = {
                    val n = tuoi.toIntOrNull()
                    if (n == null || n < 0) {
                        errorMessage = "Tu·ªïi nh·∫≠p kh√¥ng h·ª£p l·ªá" // üîπ b√°o l·ªói
                        ketqua = ""
                    } else if (n < 2) {
                        errorMessage = ""
                        ketqua = "Em b√©"
                    } else if (n <= 6) {
                        errorMessage = ""
                        ketqua = "Tr·∫ª em"
                    } else if (n <= 65) {
                        errorMessage = ""
                        ketqua = "Ng∆∞·ªùi l·ªõn"
                    } else {
                        errorMessage = ""
                        ketqua = "Ng∆∞·ªùi gi√†"
                    }
                },
                modifier = Modifier.padding(top = 8.dp)
            ) {
                Text("Ki·ªÉm tra")
            }
            if (errorMessage.isNotEmpty()) {
                Text(
                    text = errorMessage,
                    color = Color.Red,
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(top = 10.dp)
                )
            } else if (ketqua.isNotEmpty()) {
                Text(
                    text = "K·∫øt qu·∫£: "+ ten + " l√† "+ ketqua,
                    color = Color.Blue,
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(top = 10.dp)
                )
            }
        }

    }
}

@Preview(showBackground = true)
@Composable
fun PreviewApp() {
    App()
}